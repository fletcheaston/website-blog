var u=Object.defineProperty;var f=(Q,i,s)=>i in Q?u(Q,i,{enumerable:!0,configurable:!0,writable:!0,value:s}):Q[i]=s;var E=(Q,i,s)=>f(Q,typeof i!="symbol"?i+"":i,s);import{r as B,j as e,d as m}from"./index-BOVISP07.js";import{s as C,a as V}from"./utils-D-kyB9IB.js";import{z as K,I as x}from"./view-input-CgTCnHyV.js";import{s as y}from"./colors-1K_XXDkD.js";import{T as X}from"./table-COcN6_W2.js";import{B as G}from"./button-BbjwN_Wg.js";import{A as p,a as D,b as O,c as g}from"./accordion-d_c9Q27N.js";import{P as a,T as R}from"./code-block-BHhHmU_4.js";import{B as J}from"./layout-CKZEFHhW.js";import{H as P}from"./header-00-8GVRa.js";import{S as T}from"./separator-CAx1mVLs.js";import"./__vite-browser-external-D7Ct-6yo.js";import"./routeInfo-DNFRKWbG.js";const Z=`MMNNPPPPGGGGAGGPPPPPPPPPZZZZZZZLLLLLLLEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAMMMMNNMMMMMMMMMMMMMMMMAARRRRRRRRRRRRRRRRRRHHHHHHHHHHHHHAAAAAAAAAAAA
MNNNPNPPGGGGGGGPPPPPPPEPZZZZZZZLLLLLLLWWEEEEEEEEEEEEEAPAAAAAAAAAAAAAAAAAAMMMMMMMMMMMMMMMMMMMAMMAARRRRRRRRRRRRRRRRQRHHHHHHQHHHHHHHWAAAAAAAAAA
NNNNNNNPGGGGGGGGPPPPPPPZZZZZZZZZLLLLLLLEEEEEEEEEEEEEEPPPPAAAAAAAAAAAAAAMMMMMMMMMMMMMMMMMMMMMAAAAAAAAAVRRRRRRRRRQQQQHHQQHQQQHQHHHHWWWWAAAAAAA
NNNNNNNNGGGGGGGPPPPPPPPPZZZZZZLLLLLLLLLLEEEMEEEEEEEEEEPPPPAAAAAAAAAAAMMMMMMMMMMMMMMMMMMMMMMMMAAAAAAVVVVRRRRRRRQQQQXQQQQQQQQQQQQHHHWWWWWAAAAA
NNNNNNNYYGGGGGGPPPPPPPPPZZZZZZZLLLLLLLLMMMMMEEEEEEEEEPPPPPPAAAAAHAAAAMMMMMMMMMMMMMMMMMMMMMMMMMMAVVVVVVVRRRRRQQQQQQQQQQQQQQQQQQQHHWWWWAAAAAAA
NNNNNNNXYYYCCCIPPPWZPPPPPZZZZZZLLLLLLLSSMMSSEEEEEEEPPPPPPPPPPAAHHAAAAHMMMMMMMMMMWWMMMMMMMMMMMMMMMDDVVVVRRRRRRQQQQQQQQQQQQQQQQQQHHWWWWWAWAAAA
NNNNNNXXYCCCCCIPPPPZZPPPZZZZZZZZLSLSSSSMMMSSEEEEEEEPPPPPPPPPPPAAHHAAAHHMMMMMMMMMMWMTTMMMMMMMMMMDDDDVVVVRRIIMRMMMQQQHTTQQQQQQQQQQQWWWWWWWWWWA
NNNXXXXXXCCCCCCXPZPZZZPZZZZZZZZZZSSSSSSSSSSSEEEEEEEEPPPPPUUXXXHAHHHAHHHMMTMMMTMMMMTTTMMMMMMMMMDDDDDVIIIRIIMMMIMZQQQHTHQQQQQQQQQQAAWWWWWWWWAA
NNNNXXXXCCCCCCCZZZZZZZZZZZZZZZSSSSSSSSSSSSSSSSEEFFPPPPPUUUXXXHHHHHHHHHHHTTMMMTMMMMTTTTTMMMMMMDDDIDDVIIIIIIIMMMMMQQQHHHQQQQQQQQQQAAAWWWWWAWAA
NNNNNXXXXCCCCCAVVZZZZZZZZZZZUUUSSSSSSSSSSSSSSFEFFFFPPPPUUUXXXXHHHHHHHHHHHTMTTTTTMMTTTTTTMMMDMDDIIIVVIIIIIIIMMMMMMQQHHQQQQQQQQGGGQAAAWWWAAAAA
NNNNNXXXCCCCCVVVVVVZZZZZZZZUUUUSSSSSSSSSSSSSFFFFFFFPPPUUUUXUXHHHHHHHHHHHHTTTTTTTMMTTTTTTMMDDDDDDIIIIIIIIIIIMMMMMMQIHAQQQQQQQQQQQQAAAAAWAAAAA
NNNNNNXCCCCCCCVVVVZZZZZZZZZUUUUSSSSSSSSSSSSSSFFFFFFPPPUUUUUUXHHHHHHHHHHHHHTTTTTTTTTTTTTTTTTDDDAAAAIAIIIIMMMMWMMDDGGGAQQQQQQQQQQQQQAAAAAAAAAA
NNNNNNNCCCCCCCCVVZZZZZZZUZZUUUUSSSSSSSSSSSFFFFFFFFFFPPUUUUUUUHHHHHHHHHHTTTTTTTTTTTTTTTTTTTDDVVAAAAAAIIIIIIIMMTTDDGGGAQQQQQQQQQQWWWUUUAUUUAAA
NNNNNNNNCCCCCCCCVVZZZZZZUUZUUUUSSSSSSSSSSSSSFFFFFFFFPPUUUUUUHHHHHHHHHHHHHHTTTTTTTTTTTTTTTTTDVVXAAAAAIIIIIIIMTTTTTTTGGQQQQQQQQQQWWWUUUUUAAAAA
NNNNNNNNNNNCCCCCCCZZZZZZUQUUUUUUUSSSSSSSSXSSOFFFFFFFFPPPPUOOHHHHHHHHHHHTTTTTTTTTTTTTTTTTTTTDVVVAAAAAAIIIIIIMTTGTTGGGGQQQQQQQQQQWWWUUUUUUAAAA
NNNNNNNNNNCCCCCCCCZZZZZUUQUUUUUUUSSSSSSSSSSOOOOFPFPFPPPPPPPPPPHHHHLHHHHTTTTTMMMTTTTTTTUTTTTDDVVVVAAAAIIIIIIMTTTTTGGGGQGGGQQCQQWWWWUUUUUUUUUA
NNNNNNNNNNNNCCCCCBBMZZZUUUUUUUUUUSSSSSSSSOOOOBBPPPPFPPPPPPPPPPXHHHHHHHHTTPTTMMMTTTTUTUUUUUUUVVVVVVVAAAIIIIIITTTTTGGGGGGGGQFFWWWWWWUUUUUUUUUU
NNNNNNNNTNCCCCCCBUBBHCCCUUKUUUUUSSSSSSSSOOOOOBBPPPPPPBPPPPPPPPHHHSSSSHPPPPPMMMMMTTTUUUUUUUUOUVVVVVVAAIIIIIIITTTTGGGGGGGGGFFFWWWWUUUUUUUUUUUU
NNNNNNNWCCCCCCCBBBBBBCCCCCUUUUUUSSSSSRRRROROOOBBBBBBBBBBPPBBBBHSSSSSSSPPPPPMMMMMTTUUUUUUUUUUUVVVVVVVVVVVVXIITTTGGGGGGGFFFFFFSSKWUUUUUUUUUUUU
NNNNNWWWWCCCCCCCBBBBHCCCCCUUUUUUUSSTGRRRRRRRRBBBVBBBBPPPPPBBBBSSSSSSSSPPPPPPMMMMMTTUUUUUUUUUUVVVVVVVVVVVVXXUUGGGGGGGGGFFFFFNSSKKJUUUUUUUUUUU
MMMWWDWWIWWCCCCBBBBBBCCCCCCCCCCCCCGGGGRRRRRRRVVVVBBXXXXXPPBBSSSSSSSSSPPPPPPPMMMMMUTUUUUUUUUUUUUVVVVVXXXXXXXUUGGGGGGGGGFFFFFSSKKKJUUUUUUUUUUU
MMMMWWWWWWWCCCCBQBBBBCCCCCCCCGGCGGGQGGRRRRRRRVZZZZZXXXXXBBBSSSSSSSPSPPPPPPPPPMMMMUUUUUUUUUUUUUUFVVVVXXXXXXXUUUUGGXGGGGGFFFFAAAKKJUUUUUUUUUUU
MWWWWWWWWWCCCCCCQBQBCCCCCCCCCCGCGGGGGGRRRRRVVVVVZZZXXXXXZBBSSSSSSSPPPPPPPPPPPMMMMMUUUUUUUUULFFUFFVXXXXXXXXXUUUUGXXGGGEFFFKKKKAKKKKKUUUUUUUUU
WWWYWWWWWWKCCCQCQQQCCCCCCCCCCGGGGGGGGGGGGGGVVVVVVZZXXXXXZZBBSBBSSSPPPPPPPPPEEMMMMMGUUUUUUUULFFFFVVXXXXXXXXXUUUUUBBUUGEFFFKKKKKKKKKUUUUUUUUUU
WWWWWWWWWWWQQQQQQQQCCCCCCCCCCGGGGGGGGGGGGGGVVVVVVVZXXXXXKKKBBBBSSSSUUPPPPPPEMMSMMGGVAAAUUQFFFFFFVVVVVXXXXXUUUUBBBUUREEEMMKKKKKKKKKKKUUUUUUUU
RWWWWWWWWWWQQQCQQQCCCCCCCGGGGGGGGGGGGGGGGGVVVVVVVVVXXXXXKKKKKBBBBBSSUPPPPPSMMMSSMMGVVVVVVQFFFFFFFFVVVXXXXXUUBUBBBBBREEEMMMMKKKKKKKKKUHUUUUUU
WWWWWWWWWWWQCCCQQQQCCCCCCCCCGGGGGGGGGGGGGGGVVVVRVVRXXXXXKKKKBBBBBBBBPPPPPPSSSSSSMMMVVVVVVVFFFFFFFFFFFXXHXUUBBBBBBBRRREMMMMMKKKKKKKKKKHHHUUUU
WWWWWWWWWWWCCCCQQQCCCCCCCCCIGIIGGGGGGWGGGGVRRRRRRRRXXXXXKKKKKKKBPBBPPPPPPSSSSSSSSMVVVVVVVVVVFFFFFFFFFHHHUUBBBBBBBRRRMMSMMMKKKKKKKKKKKUHUUUUU
WWWWWWWWWWWWCCCCCCCCCCCCCCIIIIGGGGGGGWGGGVVRRRRRRRXXXXXXKKKKKBBBPPBPPRPPPPPSSSSSSVVVVVVVVVVVAFFFFFFFFFHHHHIBBBBBRRRRMMMMMMSKKKKKKKKVVUUUUUUU
WWBBWWAWWUUUCCCCCCIQQCCCCIIIIRRRRRRRWWWGGVRRXXXXXXXXXXXXKKKKBBBBPPPPPPPPPPPPSSSVVVVVVVVVVVVVAFFFFFFFFFHHHBBBBBHHHRRRMMMMMMMKKKKKKKKVUUUUUUUU
WWWAAAAWUUCCCCCCCIIICCCCCIIIIRRRRRRRWWGGVVVVXXXXXXXXXXXOBKBBBBBPPPPPPPPPPPPPPPPPLVVVVVVYVVVEFFFFFFHHHFFHHHHHBBBBHHHMMMMMMMMMKKKKKUUUUUUUUUUU
WWWAAAAUUUUCCCCCCIIIIIIIIIIIURRRRRRRRRGGXXXXXXXXXXXXXXXRBBBBBBBBPQPPPPPPPPPUPPXEEVEVVVVVVVEFFFFFFFHHFFHHHHHHHHBHHMMMMMMMMMMMKKKKKKKKUUUUUUUU
WWWAAAAUAUUCCCCCCLLIIIIIIIIUURRRRRRRRRGGXXXXXXXXXXXXXXXRRBBBBBBBPPPPPPPPPPPUPVEEEEEVVVVEVEEEEEFFFFHHHHHHHHHHHHHHHHMMMMMMMMMKKKKKKKKUUUUUUUUU
WWAAAAAAAAUEEEOOOLIIIHIIIIIIURRRRRRRRRXXXXXXXXXXXRXXXXXXRBBBBBBBBPPPPBPPPBEBBBEEEEEVVVEEEEEEEEEEFHHHQHHHHHHHHHHHHHMMMMMMMMMMMKKKKKUUUUUUUUUU
OOAAAAAAAAUOOOOOOLLLLIIIIIIIURRRRRRRRRXXLLLLXXXXXRXXXXXXRRMBBBBPBPPPPBBTPBBBBEEEEEEEEVEEEEEEEEEEFQQQQHHHHHHHHHMMMMMMMMMMMMMMMMMKKKKUUUUUUUUU
OACCAAAAAGAOOOOOOELLLLIYIIRRRRRRRRRRRRXLLLLLXXXXXRRRRXXXRRRBBBBJKKPPPBBBBBBBBBEEEEEEEVEEEEEEEEEEEQQQQQHHHHHHHHHMMMMMMMMMMMMMMMMKKKUUUUUUUUUU
AAAAAAAAAAAOOOOOEEELLLIYYVRRRRRRUUUUXXXLLLLLXXXXXRRRRXXXRMRBBBBJKJUBBBBBBBBBBBCEEEECEEEEEEEEEEEEQQQQQQHHHHHHHHHMMMMMMMMMMMMMMMWDDDWUUUUUUUUU
AAAAAAAAAAAOOOOOUULLLYYYRRRRRRRRUUUUXXXXLLLLXXXXXXXXXXXXXMMCCBLJJJUBBBBBBBBBBQCCCCCCEEEEEEEEEEEEEFQQQHHHHHHHHMMMMMMMMMMMMMMMMWWWWWWWUUUUUUUU
AAAAAAAAAAROOOOORRRRRRRRRRRYYDUUUUXXXXXXXLLLXXXXXXXXXXXXXCCCCCJJJJUUUUUBBBBCCCCCCCCCCEEEEEEEEEEEEEQQQEEHHHHHHHMMMMMMMMMDDDDDMWWWWWWUUUUUUUUU
ZZAAAAAXAAROOOOORRRRRRRRRRRDDDUOUUAAXXXXWWLLLLRRXXXXXXXXXCCCCJJJJJJJJJJBBBLLLLLCCCCCEEEEEEEEEEEEEEEEEEEHEEEHHHMMMMMMMDDDDDDWWWWWWWWWWUWUUUUU
ZZZAAAAOOOOOOOOORRRRRRRRRRRYDUUOUUUAXXXXXAAAALRRXXXXXXXXXCCCCCCCJJJJJLLLLLLLLLCCCCCCEEEEEEEESEEEEEEEEEEEEEHHHMMHMMMMDDDDDDDWWWWWWWWWWWWWWUUU
ZZZAAAUOOOOOOOOORRRRQYYYYYYYYOUOUUAAAAAAAAAAALRRXXXXXXXXXCCCCCCJJJJJJLLLLLLLLLCCCCCCCCEEWWEEEEEEEEEEEEEEEEEHHHHHMHHHQQQQQQQQWQWWWWWWWWWWWWUU
ZZAAXAUOOOOOOOOORRRREYYYYYOOOOOOOOAAAAAAAAAAAARAAAAAZXXXCCCCCCCJJJJJJJLLLLLLLLCCCCCCCCEEWWWEEEEIEEEEEEQQHHHHHHHHHHHQQQQQQQQQQQWWWWWWWWWWWWUU
ZZAAXAUOOOOOOOOORRRROOYYREOOOOIOOOAAAAAAAAAAAARAAAAAZZZYYCCCCCCJCJJJJLLLLLLLLLCCCCCCCCCWWWEEEEIIEEEEEEEQQHHQHHHHHHQQQQQQQQQQQQWWWWWWWWWWWWUU
ZZAAUUUOOOOOOOUUEEEEEEEEREOOOOIOOOAAAAAAAAAAAAAAAAAAZZZYYYYCCCCCCCCLLLLLLLLLLLLLCCCCPCWWWWEEEEIIIIEEEEEQQQQQHHAQQQQQQQQQQQQQQQWWWWWWWWWWWUUU
PPPPPYUOOOOOOOEEEEEEEZEEEEOOOIIIIOAAAAAAAAAAAAAAAAAYYYYYYYYCCCCCCCCLLLLLLLLLLLLLCCCPPCWWWWWEEEIIIIEEEEQQQQQQQJJJJQQQQQQQQQQQQQQQQWWWWWWWUUUU
PPPZYYYOOOOOOOOOOOEEEEEEEEIIIIIIIIAAAAAAQQAQAAAAAYAYYYYYYYYCCCCCCCLLLLLLLLJJLFLFFCTFFWWWWBBEEIIIIIKQQEQQQQQQJJJJJQQQQQQQQQQQQQQQQQWWWWWWUUUU
PPPZYYYYYYYYYOOOOOEEEEEEEIIJIIIIIIACAAQQQQQQQAAYYYYYYYUYYYYCCCCCCCCLLLLLLLFFJFMFCCFFFSBBBBBBIIIIIIIQQQQQQQQQQQJJJJQQQQQQQQQQQQQQQQQWWKWWWUUU
PPPYYCYYYYYYYOOOOOOEEEEEEIIIIIICCCCCCCCCCQQQQQYYYYYYYYYYYYYCYCCCCCCCLOOOLLFFFFFFFCFFFSSBBBBBIIBIIIBBQQQQQQQQQQQJJJQQQQQQQQQQQQQQQQQWLWWWWUUU
PPYYYYYYYYYYYOOOOOOEEEEEEEIIIIICCCCCCCCCCQQQQQQQQYYYYYYYYYYYYCCCCCCOOOOOLHHFFFFFFFFFFFSSBBBBBBBIBBBQQQQQQQQQQQQQJJJQNQQQQQQQQQQQQQHHHHWWWWUU
PYYYYYYYYYYYYOOOOOOEEEEEEEIICCCCCCCCCCCCCQQQQQQQQYYYYYYYYYYCCCICKITOOOOOHHHFFFFFFFFFFFFFBBBBBBBBBQQQQQQQQQQQQQJQJJJOQQQQOQQQQQQQQQQHHHHWWWHH
PYYYYYYYYYYYYOOOOOOEEEEEIIIICCCCCCCCCCCCCQQQQQQQQYYYYYYYYZYSCCIIKIIOOOOOHHFFFFFFFFFFFFFFFFBBBBBBBBQQQQQQQQQQQQJJJJOOOQQQOQQQQQQQQQHHHHHHWWHH
PYYYYYYYYYYYYOOOOOOEEIIIIIIICCCCCCCCCCCCCQQQQQQYYYYYYYYYYYYIIIIIIIIOOOOOHHFFFFFFFFFFFFFFFBBBBBBBBBQCQQQQQQQQXXXJJKKOOQQQQQQQQQQQQQHHHHHHHHHH
PPPPYYYYYYYYYOOOOOOIEIIIIZZZCCCCCCCCCCCCCQQQQQQQPYYYYYYYYBYBIIIIIIIOOOOOIHHFFFFFFFFFFFFFFBBBBBBBBBBQQQQQQQQQXXXKKKKKKKKKKKQQQQQHHHHHHHHHHHHH
PPPYYYYYYYYYYOOOOOOIIIIIIZZZCCCCCCCCCCCCCQQQQQQPPPYYYYYYYBBBIIIIIIIOOOJJIIFFFFFFFFFFFRFFFBBBBBBBBBBBQQQQQQQQXXXKKKKKKKKKKKQQQQQHHHHHHHHHHHHH
PPPPPYYYYYYYYOOOOOOIIIIIIZZZCCCCCCCCCCCCCMQQQQQQQYYYYYYYYYYBBIIIIIIOOOOOOFFFFFFFFFFRRRFBBBBBBBBBBBBBBBQQQQQQQXKKKKKKKKKKKKQQQKQKHHHHHHHHHHHH
PPPPPYYYYYYYYIIIIIIIIIIIIIZZCCCCCCCCCCCCCCCCCCCCCGGYYYYYBBBBIIIIEEIIOOOOODFFFFFFVBBRRRRBBBBBBBBBBBBBWBQQQQQQQQIIIKKKIKKKKKKKKKKKDDDDDDHHHHHH
PPPPYYYYYYYYYIIIICIIIIIIIIIZCCCCCCCCCCCCCCCCCCCCCGGYYBBBBBBIIIEEEEEEOOOOOFFFFFFBBBBBRRBBBBBBBBBBBBBBWWWWQQQQPQIIIIIIIKKKKKKKKKKKKKDDDDHHHHHH
PPPYYYYYYYYYYICIICCIIIIIIIZCCCCCCCCZZZCCCCCCCCCCCYYYYBBBBBBBIIEEEEEEOOOOOEEFFFFCBBBBRRBBBBBBBBBWWWWWWWWWQWWIIIIIIIIIPIKKKKKKKKKKKKDDDDDHHHHH
PPPPYYYYYYYZYZCCCCIIIIIIIIZZCCCCCCCZZZCCCCCCCAQQAGLYBBBBBBBBBBEEEEEEOOOOOEEEFFWBBBBBBBBBBBBBBBBBWWWWWWWWWWIIIIIIIIIIIIIKKKKKKKKKKDDDDDDDDHHH
PPPPYYJJYZZZZZCCCCIIIIIIIIIFZZZZZZZZZZCCCCCCCAAAAGGGGGGBBBBBBBEEEEEEOOOOOEEEEFWWBBBBBKKBKKBBBBBWWWWWWWWWWWWIIIIIIIIIIIKKKKKKKKKKKDDDDDDHHHHH
PPZPPYJJYZZZZZZCCCCIIIIIFIIFFBFFZZZZAACCCCCCCAGAGGGGGGGGGBBBBEEEEEEEOOOOOEEEEWWHZZZBBWKKKKKBBWWWWWWWWWWAWWWWIIIIIFIIIIKKKKKKKPKKKDDDDNDHHHHH
ZPPPPPZZZZZZZZZCCCCCCUIIFIIFFFFOOZZZAAACCCCCAAGGGGGGGGGGBBBBBEEEEEEEOOOOOEEEXHHHZWWWWWKWWKKWWWWWWWWWWWAAAWWWIIIIIFFIKKKFFFKPKPKKKKDDDDHHHHHH
ZZZPZZZZZZZZZZZCIIRCUUUIFFFFFFFOFBZAAAACCCCCAAGGGGGGGGGGGGBEEEBEEEEEDEDDEEEEXHHHHHHWWWWWKKKKWWWWWWWWWWAAARRWIIIIFFFIFKFFFFPPPPKKKKKPHHHHHHHH
ZZZZZZZZZZZZZZZIIIIIUUUFFFFFFFFFFZZZNANCCCCCAGGGGGGGGGGGGGBBBBBEEDDDDDDDDEEEEEHHHHHWWWWWWKWWWGWWWWWWWWAAARRRIIIIFFFFFFFFFFFPPPKPKKKPPPHHHHHH
ZZZZZFZZZZZSSZZRIIIIUUUFFFFFFFFFFFFFNNNCCCCCGGGGGGGGGGGGGBBBBBBBDDDDDDDDDDEEEEHHHHWWWWWWWWWWWWWWWWWWAAAAARRRIIIIIFFGFFFFFFFFPPPPKPPPPPPHHHHH
FFFFFFZZZZZZSSSIIIIIUUUUUUUFFFFFFFWNNNNNNANGGGGGGGGGGGGGBBBBBBBBDDDDDDDDDDDDEHHHHHWWWWWWWWWWWWWWWWWWAAARRRRRIRIIFFFFFFFFFFFWPPPPPPPPPPPHHHHH
GFFFFFLZZZXZSSSSSSSIUUUUUUUFFFFFFFFFNNNNNNNNNGGGGGGGGGBBBBBBBDBDDDDDDDDDDDDDHHHHHHWWWWWWWWWWWWJJJWAAAARRRRRRRRRIFFFFFFFFFFFWWPPPPPPPPPPPHHHH
GFFFFFFFFZFQFSSSSSSUUUUUUUUUFFFFFLFYNNNNNNNNGGGGGGGGGGBBBBBBBDBDDDDDDDDDDDDDHHHHHHHWWWWWWWWWWWWWJAAAARRRRRRRRRRQFFFFFFFFFFFFWPPWWPPPPPPPHHHH
GGFFFFFFFFFFFSSSSSSUUUUUUUUUUFFFZNNNNNNNNNNNUUUGGGGGHIIBBBBBDDDDDDDDDDDDDDDDHHHHHHHWWWWWWWWWWWWUAAAAAAIRRRRRRRQQFFQRFFFFFFFFWWWWWPPPPPPUIISS
FFFFFFFFFFFFIFSSIIIIUUUUUUUUFFFFINNNNNNNNNNNNNUGGGGIIIIIIIIIDDDDDDDDDDDDDDDHHHHHHHHWWWWWWWWWWWWWCACCCQQQRRRQQQQQQFFRCFFRRFFWWWWWWPPPPPPUUIIS
QQQFFFFFFFFFIFIIIIIIUIUUUUUUUIIIIIINNNNNNNNBNNUUGGGIIIIIIIIIDDDDDDDDDDDDDOEHEHHHHHHWWWWWWWWWWSWCCAACQQQQQQQQQQQQQQQRRRRRRRRWWWWWWPPPPPPPPIIS
QQQQFQFFFFFFFFPIIIIIIIUUUUIIIIIIIIINNNNNNNNNNUUUUUIIIIIIIIIIAADDLDDDDDDDDOEEEHHHHHWWWWWWWWWWHHCCCCCCQQQQQQQQQQTTQQRRRRRRRRRWWWWPPPPPPPPPIIIS
KQQQQQFFFFFFFFFIIIIIIIUUUUIIIIIIIIINNNNNNNNNNUUUUUUIIIIIIIIIADDDLDDDDXXEEEEEEHHHHHHHWWRQQQHHHHCCCCCQQQQQQQQQQTTTTTRRRRRRRRRRPPPPWPPPPPPIIIII
KKKQSSSSFFFFFFFIIIIIIIUIIIIIIIIVIIIVVVNNNNNNNNUNUUUIIIIIIIIDDDDDLDXDDXXEEEEEEEHHHHHHWRRQQQHHHHCCCCCQQQQQQQQQQTTTTRRRRRRRRRSSSPPPPPPPPIIIIIII
SKVSSKSSALLLNLLRIIIIIIIIIIIIIIIVVVVVNNNNNNNNNNNNUUUIIIIIWWDDDDDDDDXXXXXEEEEEEEEHHHHHHRRQQQHHHHHHHCCCQQQQQQQQQTTTTRYRRRRRRRSSSSSSPPPPPIIIIIII
SSSSSSSSLLLLLLLRIIIIIIIIIIIIIIIVVVVVVVNVNNNNNNNUUUUIIIIIDDDDDDDDDDDXDXXEEEEEEEESAHHHHRRQQQQQHHHHHHHHHHHQQQQQQTTTTYYYRRRRRRSSSLLLPPPIIIIIIIIW
SSSSSSSSLLLLLLLLIIIIIIIIIIIIIVVVVVVVVVVVNNNNNNNNNUUIIILDDDDDDDDDDDDDDDDEEEEEESSSSQQIFFFFFFFFUHZHHHHHNNHQQTQTTTTTTYYYYRRVLLLLLLLLBIIIIIIIIIIW
WWWSSSSSLLLLLLLLINNIIIIIIIIIVYVVVVVVVVVVNNNNNNNNUUUUUUUBBDVDDGDDDDDEEEDEEEEESSSSSQQQFFFFFFFFQZZZZHHHHNNNTTTTTTTTYYYYYRRLLLLLLLLLBBIIIIIIIIIW
WWSSSSSSSSLLLLLNISNIIIIIIIIIVVVVVVVVVVVVVNNANNNNNUUUUUULLMLDDGGDDDDEEEEEESSSSSSSQQQQFFFFFFFFQQZZHHHNNNNTTTTTTTTHHYSYYYYLLLLLLLLLBIIIIIIIIIII
WWWSSSSSSSSSSSNNNNNNIIIIIVVVVVVVVVVVVVVVAAAANNNNNUUUUUUULLLDDDLLDDDDEEEEESSSSSSSSSQQFFFFFFFFFFFZZZHNNNNTTTTTTTTHYYYYYYYLLLLLLLLLBIIIIIIIIIIX
WWWSSSSSSSSSSSNNNNNIIIIIIVVVVVVVVVVVVVVVAAANNNNTTTUUUUULLLLLLLLNDDDDMEESSSSSSSSSSQQQFFFFFFFFFFFZJJJJNNNNNTTTTFFFFYYYYYYLLLLLLLLLLLBIXIIIIIXX
WZWZSSSSSSSSSSNNNNNNIIIIIVIVVVVVVVVVVVVVAAAAANNTUUUULLLLLLLLLLLLQDLDEEESSSSSSSSSSQQQFFFFFFFFFFFJJJJNNNFFNTTTTFFFFKKYYYYRLLLLLLLLTTTIIHHIIMMX
ZZZZSSSSSSSSNNNNNNNNIIIIIIIIVVVVVVVVVVVVAAAAETTTQUUUULLLLLLLLLLLLWLLEEESSSSSSSSSSQQQFFFFFFFFFFFJJJJJJJFFFFFFFFFFKKKYYYRRRLLLLLTTTTTHHHHIMMMM
ZZZZSSSSSCCCNNNNNNNNNIIIIIIIVIVVVVVVVVAAAAAEETTTQQUUULLLLLLLLLLLLLLLEESSSSSSSSSSSQSQFFFFFFFFFFFFFFFJJWFFFFFFFFFFKKKKYRRRRRLLLLTSTTTTHHHHMMMM
ZZZZSSSCCCCCYNNNNNNNNIIIIIIIIIVVVVVVAAAAAEEEETTQQQUUULLLLLLLLLLLLLLLEEQSSSSSSSSSSSSQFFFFFFFFFFFFFFFJJFFFFFFFFFFKKKKKKRRRRRLLLLTTTUTTTHMMMMMM
ZZKKCCCCCCCCCCNNNNNNIIIIIIIIIIIIRVVVVAAAAAEEEEEEEQUQLLQLLLLSSSSLLQQLQQQSSSSSSSSSSSSCFFFFFFFFFFFFFFFTJTFFFFFFFFPFKKKKKKRRRLLLLLLLTUTTTHHMMMMM
KKKKCCCCCCCCCCNNNNNNIIIIIIIIIIIIIIAAAAAEEEEEEEEEEQQQQQQLLLLLESSSSQQLQQQSSSSSSSSSSSSSFFFFFFFFFFFFFFFTTTTFFFFFFFFFFKKKRRRRRRLLLLLLTTTTTTHHMMMM
UKKKCCCCCCCCCNNRYYIIIIIIIIIIIIIIIIAAAAAEOEEEEEEEEEQQQLLLLLLLESSSQQQQQQQQSSSVSSSSSSSJFFFFFFFFFFFFFFFTTFFFFFFFFFFFKKKKKRRRRRLLLLLLLLTTTTHHMMMM
UKKCCCCCCCCCCCNCYYIIIIIIIIIIIIIIIIAABAAAEEEEEEEEEQQQQQLLLLLLEEQQQQQQQQQQSSVVSSSSSSSSFFFFFFFFFFFFNNNNTNNFFFFFFZKKKKKKKRRRRLLLLLLLLLTTTTHHMMMM
UKKCCCCCCCCCCCCCYYIIIIYYYYYIIIIIAAABBBBEEEEEEEEEQQQQSSLLLESSEQKQQQQQQQQQSVVVVSSSSPPSFFFFFFFFFFFFNNNNANNNFFFFFFKKKKKKKIIRILBULLLLLLTTMMMMMMMM
UKKKCCCCCCCCCCYYYYYIIIYHYYYYYYIAAAABBBBBEEEEEEQQQQQQSSSSSSSSEQQQQQQQQQQQQQVVQPPPPPSSSYFFFFFFFFFFNNNNNNNNNNFFFFKKKKKKKIIIIIUUUULUTTTTTTMMMMMM
UUKKKCCCCCCCCYYYYYYIYIIHHHYAAAIAAAABBBBBBEEEEEEESSSSSSSSLLSSQQQQQQQQQQQQQQQQQPPPPPSYYYYJFFFFFFFFNNNNNNNGNMMMFFKKKKKKIIIIIIUUUUUUUTTTTMMMMMMM
UKKCCCCPCCCSSYYYYYYYYYYHHFAACAAAAAAABBBBBEEEDDSSSSSSSSSSLSSSHVQQQQQQQQQQQQQQQQQPPPYYYYEEEEEJJJJNENENNNNNNMMMMFKKKKKKIIIIUUUUUUUUUTUTMMMMGMMM
UKKKKKCCCCCYYYYYYYYYYYYHHHAAAAAAABBBBBBBBEEBSSSSSSSSSSSSSSSHHVQQQQQQQQQQQQQQQQQPPPYYYYYEEEEEEEEEENENNNNNNMMMMMKKKKKKIEEIIUUUUUUUUUUUDMMMGMMZ
UKKKKKKKCCCAAAYYYYYYYYYHHHTAAAAAAAABBBBBBBBBBBBSSSSSSSSSSSSVVVQQQQQQQQQQQQQQQXXPPYYYYYYHEEEEEMEEEEEENNNNNMMMMKKKKKIIIEEEEUUUUUUUUUUUMMMMMMMZ
KKKKKKKKTTCCCYYYYYYYYYHHHAAAAAAAAAJJBBBBBBBBBBBBSSSSSSSSSSSSVVQQQQQQQQQQQMQDQXXPYYYYYYEEEEEEEEEEEEEENNNNMMMMMMMMKKEIEEEEEEEPUUUUUMMMMMMMMZZZ
KKKKKKKTTTMMKBYYYYYYYYHHHHHAAAAAAAJJBBBBBBBBBBSSSSSSSSSSSSSVVVVVQQQWQQQQMMXDQXXPYYYYYYYYEEEEEEEEEEEENNMMMMMMMMMKKKEEEEEEEEEEUUZUIMMMMMMMMZZZ
KKKKKKTTTTTMKKYYYYHHHHHHHHHUAAAAAAJJBBBBBWWBBSSSSSSSSSSSSSVVVVVVQTQWQMMMMMXXQXXXXYYYYYEEEEEEEEEEEEEENNNNMMMMMMMKRKEEEEEEEEEEUZZZMMMMZMMMZZZZ
KKTTTTTTTTTTKKYYKKKKKHBHHHHZLAAAAAAJJBBBNWWWRWWSSSSSSSSVVVVVVVVVVVVVQMMMMXXXXXXXPXXYYYYYEEEEEEEEEEENNNNNMWMMMMSSRRREEEEEEEEZZZZZZMMMZMMMMZZZ
KKTTTTTTTTTTKKKKKTKKKHBHHNZZLLLAAAJJJJBJWWIWWWWWSSSSSSSVVVVVVVVVVVVMMMMMMXXXXXXXXXXXYYYYEEEEEEEEEEEEEWWWMWWMMMSSRSSSEEEEEEEEZZZZZZMZZZMZZZZZ
TTTTTTTTTTTTJTTTTTTKKKKHHHZZZZLAAAAAAJJJJWWWWMMMMSSSSSVVVVVVVVVVVVVMMMMXXXXXXXXXXXXXYYYYYYEEEEEEEOWWNWWWWWWWWMSSSSSQESEEEEEEZZZZZZZZZZZZZZII
TTTTTTTTTTTTTTTTTTTKKKKKHHZZZAAAAAAJJJJJWWWWWMMMMSSSSSSVVVVVVVVVVVVVMMMMXXXXXXXXXXXXYYYYYIIIIEIHEOWWWWWWWWWMMMSSSSSSSSSEEEEEYYZZZZZZZZZZZIII
TTTTTTTTTTTTLTTTTTTKKKKKKKKKAAAAAAAAAJJJJJWWWMMMMSSSSSSSVVVVVVVVVVVVVMMXXXXXXXXXXXXXXYYYIIIIIIIWWWWWWWWWWWWMMMSSSSSSSSSEEEDEYYYYZZZIIIIIZIII
TTTTTTTTTTTTTTTTTTTKKKKKKKKAAAAAAAAAJJJJWWWWWMMMMSSSVSSVVVVVVVNVVNNNVMMXXXXXXXXXCXYXXYYIIIIIIIIIWWWWWWWWWWWWMMMSSSSSSSSEEYDYYZZZZZIIIIIIIIII
TTTTTTTTTTTTTTTTTTTTTKKKKKKAAAAAAAAAWWWWWWWWWMMMMCVVVVVVVVVVVNNNNNNNXNNXXXXXXXXXYYYYYYYIIIIIIIIIGWWWWWWWWWWWMMSSSSSSSSSYYYYYYKKZZIIIIIIIIIII
TTTTTTTTTTTTTTTTTTTTTKKKKKKKKAAAAAAAWWWWWWWWWMMMMCVVVTVVVVVVVNNNNNNNNNNKKXXXXXXXYYYYYYIIIIIIIIIIWWWWWWWWWWWWSSSSSSSSSSSZZYYYYYYZJIIIIIIIIIII
TTTTTTTTJTTTTTTTTTTTTTYKKKKKKAAAAAAAWWWWWWWWWMMMMWVVVTVVVNVVNNNNNNNNNNNNKXXXXXYYYYYYYYYYIIIIIIIIWWWWWWWWWWWWSSBSSSSSSZSZZZYZYYZZIIIIIIIIIIII
ZTZTTTTTTTTYYTTTTTTTAAYKKKKKKAAAAAAWWWWWWWWWWMMMMMMMMMMMMMVVNNNNNNNNNNKKKXXXKKYYYYYYYYYIIIIIIIIIIIWWWWWWWWWWSASSSSQSZZZZZZYZYZZZZIIIIIIIIIII
ZTZTTTAYYYYYYTTTTTTTTYYYYTTAAAAAAAAWWWWWWWWWWMMMMMMMMMMMMMNNNNNNNNNNNNNKKKKKKKKYYYYYYYYKIIIIIIIIIIWWWWWWWWNWAASSSSSSZZZZZZYZZZZZZIIIIDIIIIII
ZZZZTHAAAYYAYYTTTTTTTTYYYYYUUAAAAAAUWWWWWWWWWMMMMMMMMMMMMMNNNNNNNNNNNNNKKKKKKKKYYYYYYYKKKIIIIIIIIIWWWWWGNNNNNNSQSSZZZZZZZZZZZZZZZZIIDDIIIIII
ZZZZZZAAAAYAYYYYTTTTTTYYUUUUUUAUUUUUWWWWWWWWWMMMMMMMMMMMMMNNCNNNNNNNNKKKKKIIIKIIIYYYYYYYKIIIIIIIIWWWWWWWNNNNNNPPSSPPZZZZZZZZZZZZZZZDDDIIIIII
ZZZZZAAAAAAAAAYTTTTTYYYYYUUUUUAUUUDUWWWWWDWWWMMMMMMMMMMMMMNNNNNNNNNNNKKKKIIIIIIIIIRYYYYKKIIIIIIIINWUWIWNNNNNNNNPPPPPZZZZZZZZZZZZZZDDDDDIIIII
ZZZZZAAAAAAAAAAANTTTTYYYYYUUUUUUUDNNNNDDDDWWDMMMMMMMMMMMMMTTNNNNNNNNNKKKKIIIIIIIIIIIYYKKKKIIIIIINNNNIIIINNNNNNPPPPPPPPZZZZZZZZZZZZDDDDDDIIII
ZZZZZAAAAAAAAAAAAJJTTYYYYUUUUUUUAAAAAAAAADDDDMMMMMMMMMMMMMTTNXXXNNNNRKKKKKIIIIIIIIIIJYYKKKKIIIINNNNNXXXIINNJJNPPPPPPPZZZZZZZZZZZZDDDDDDDDIII
ZZZZZAAAAAAAAAAAAYYYYYYYYUYYUUUUAAAAAAAAAAADDMMMMMTTTTTTTTTMMXXXXNNNRRKKRROIIIIIIIBBYYYKGKIIIINNNNNNXXXXNNJJJNPPPPPPPZZZZZZZZZZZDDDDDDDDDDII
ZZZZZAAAAAAAAAAAAAYYYYYYYYYYUUULAAAAAAAAAAADRMMMMMMTTXXTXTTTPPXVVNNNRRRKRIIIIIIIIIBGGGGGGKIIIBNNNNNXXXXXXNNJXNPPPPPPPPPPPPSSZSSZSDDDDDDDDDII
ZZZZZAAAAAAAAAAAAAAAYYYYYYYLLLLLUDNNNNNAAAADURRRRMMTTTXXXTMTBPPPPPRRRRRRRRIIIIIIIIBGGGGGKKKIIBBNNNXXXXXXXXXXXPPPPPPPPPPPSYSSSSSSSUDSDSDDIIII
ZZZZAAAAAAAAAAAAAAAAYYYYYYYYLLLLLDNNNNNAAAADURRRRRMTTXXXTTTPPPPPPPVRRRRRRRRLIIIIIIIGGGGGKKNYIBBNNNNEXXXXXXXXXPPPPPPPPPPSSSSSSSSSSUDSSSIIIIII
ZZZZZAAAAAAAAAAAAAAXYYYYYYYYYLNNNNNNNNNAAAARRRRRRRRRXXXXXTTPPPPPPRRRRRRRRRRLLIIIIIIGGGGKKNNYNNNLNNNXXXXXXXXXXPPPPPPPPPPPPSSSSSSZZZZZIIIIIIII
ZZZZZAAAAAAAAAABBBAXYYYYYYYYLLNNNNNNNNNAAAAAAARRRRRRRXXXXPPPPPPPPRRRRRRRRRRLLIIIINIGGGSKSXNNNNNNNKKXXXXXXXXXXPPPPPPPPPPPKSSSSSSZZZZZZIIIIIII
ZZZZZZZZEAAAABBBBYYYYYYYYYYLLLNNNNNNNNNAAAAAAARRRRRXXXXXXXPPPPPPPRRRRRLMRRLLLLLIINNGGSSSSSNNNNNNKKKXXXXXXXXXXPPPPPPPPPPSKSSSSSSZZZHHHLIIZIIU
ZZZZZZZZEEEEAABBYYYYYYYYYLLLLLNNNNNNNNNAAAAAAARRRRRXXXXXXXXPPPPPPRRRRRLLLLLLLLLLLLLLLLSSSANNNNNNNKKXXXXXXXXXPPPPPPPPPPPSSSSSSSSZZHHHHHHIHHIH
ZZZZZZZEEEEEEBBBYYYYYYYYYLLYRLNNNNNNNNJAAAAAAARRXXRXXXXXXXXXPPPPPRRRRRRRLLLLLLLLLLLLOSSSSANNNNKKKKKKKKXXXXXPPPQQPPPPPIISSSISSSSSZHHHHHHHHHHH
ZZZZZZEEEEEEGGBBYYYYYYYYYYYYRRNNNNNNAAAAAAAAAAXXXXXXXXXXXXXXXXPPPPRRRRRRRLLLLLLLLLLLLRRNNNNNNNNKKKKKKXXXXKKPPPQQQPPPPIIIIWISSBSSSSSHHHHHHHHH
ZZZZZZEEEEEEGYYYYYYYYYYYYYYYRRNNNNNNAAAAAAAJRXXXXXXXXXXXXXXXXXPPPRRRRRLRRLLLLLLLLLLLLLLKNNNNNNNNKKKKKKKKXKPPPQQQQQQQPIIIIIIIIBSSSHHHHHHHHHHH
ZZZEEEIEEEGGGGGYYYYYYYYYYYYYRYYRRJJJAAAAAAAWXXXXXXXXXXXXXXXXXXXPPRRRRRLLRLLLLLLLLLLLLLKKNNNNNNNNKKKKKKKKKKKQQLQQQQQQPIIIIIIIIBBBSHHHHHHHHHHH
ZZZZZEEEEEGGGGGYYYYYYYKKKKYYYYYRRRJJAAAAAAAAAAXXXXXXXXXXXXXXXXJPRRRRROOLLLLLLLLLLLLLKKKKKNNSNNKKKKKKKKKKKEEQQQQQQQQQQIIIIIIIIIIIIHHHHHHHHHHH
ZZZZZEEEEEZZGGGGYGYYYYKKKKKKKKRRRRJJAAAAAAAAAAQNNXXXXXXXXXXXBXJPBRRROOOOOQQQQLLLLLLKKKKKKNNNNNKKKKKKKEEEKEEEQQQQQQQQQIIIIIIIIIIIIIIHHHHHHHHH
ZZZZZZZEZZZZZZGGGGGGGYKKKKKKKRRRRJJJJJJJAAAAAAQNNXXXXXXXXXXXBBBBBBBOOOOOOOOQLLLLLLQKKKKKKKKKKKKKKKKKKKEEEEEEQEQQQQQIIIIIIIIIIIIIIIHHHHHHHHHH
ZNZZZZZZZZZZZZZGGGGGGKKNKKKKKKRRRRJNNNNNAAAAAANNNNXXXXXXXBXBBBBBBBAOOOOOOOOQLLLLLQQQKKKKKKKKBKKKKBKKKEEEEEEEEEEQQQQIIIIIIIIIIIIIIIHHHHHHHHHH
NNZZZZZZZZZZZZZZGGGGKKKKKKKKKKKKNNNNNNNNAAAAAANNNNSSSSSBXBBBBBBBBBOOOOOOOQQQQQLLQQQQQKKBKKKBBBBBBBBKEEEEEEEEEEEQQQQIIIIIIIIIIIIIDIHHHHHHHHHH
NNNNZZZZZZZZZZZZGGGGKKKKKKKKKKKNNNNNNNNNNNNNNNNNNNSSSSBBBBBBBBBBBBOOOOOOOQQQQQQQQQQQQKKBKKKBBBBBBBBBMEEEEEEEEEEQQQQIIIIIIIIIIIIIDHHHHHHHHHHQ
NNNNZZZZZZZZZGGGGGGGKKKKKKKKKKKNNNNNNNNNNNNNNNNNNNSSSSBBBBBBBBBBBBIOOOOOOOQQQQQQQQQQKKKBBBBBBBBBBLBEEEEEEEEEEEEQQQQIIIIIIIIIIIIIDHHHHHHHHHHH
NNNNNNNNZZZZZGGGGGKKKKKKKKKKKKKNNNNNNNNNNNNNNNNNNXSSSSBBBBBBBBBBBBIOOOOOOOOOQQQQQQQQQBBBBBBBBBBBBEEEEEEEEEEDEQQQPQQFSSIIIIIIISIIDDHHHHEHHHDD
NNNNNNNNNZZZGGGGGGGKGKQKKKKKKKXNNNNNNNNNNNNNNNRNSXSSSBBBBBBBBBBBBBIIIIIOOOLQQQQQQQQQOBBBBBBBBBBBBEEEEEEEEEEDEFQQPQFFSSIIIIIISSSSDDDHHEHHHHDD
NNNNNNNNNZNNGGGGGGGGGKKKKKKKKXXNNNNNNNNNNNNNNNSSSXXSSSBBSBBBBBBBBBBBBIIOOOQQQQQQQQQQQBBBBBBBBBBBBBEEEEEEDDDDFFQQQFFFSSSSSSSIISSSSSDDDHHHDHDD
QNNNNNNNNNNGGGGGGGGGGKGGKKKKKKXXNNNNNNNNNNNNSSSSSXSZSSZBBBBBBBBBBBBBBIIIOIQQQQQQQQQQKBBBBBBBBBBBBBBDDEEDDDDDFQQFFFSSSSSSSSSSSSSSSSDDDDDDDDDD
NNNNNNNNNNNNNGGGGGGGGGGGKKIKKXXXXNNNNNNNSNSSSSSSSSSZSZZZZZBBBBBBBBBBBBIIOIIIQQQQQQABBBBBBBBBBBBBBBBBDDEEDDDFFFFFFFSFSSSSSSSSSSSSSDDDDDDDDDDD
NNNNNNNNNPNGGGGGGGGGGGGGGKKXXXXXXNNNNSSSSSSSSSSSSSSZZZZZZZBBBBBBBBBBBIIIIIQQQQQQQQQBBBBBBBBBBBBBBBDDDDDDDDDFFFFFFFFFSSSSSSSSSSSSDDDDDDDDDDDD`,w=K.array(K.string().transform(Q=>Q.split(""))),F=w.parse(Z.split(`
`)),l=800,Y=800,$=l/F[0].length,v=Y/F.length,b=l/F[0].length,k=Y/F.length;let z=class{constructor(i,s,t,n){E(this,"map");E(this,"canvasContext");E(this,"value");E(this,"color");E(this,"seenPositions");E(this,"positions");E(this,"edges");this.map=i,this.canvasContext=s,this.value=t,this.color=y(t),this.seenPositions=new Set,this.positions=[],this.edges=0,this.add(n)}has(i){const s=`${i.y},${i.x}`;return this.seenPositions.has(s)}add(...i){i.forEach(s=>{const t=`${s.y},${s.x}`;this.seenPositions.has(t)||(this.positions.push(s),this.seenPositions.add(t),this.map.seenPositions.add(t),this.canvasContext.beginPath(),this.canvasContext.strokeStyle=this.color,this.canvasContext.fillStyle=this.color,this.canvasContext.fillRect(s.x*$,s.y*v,b,k),this.canvasContext.closePath())})}findEdges(){this.edges=0;const i=new Set;this.positions.forEach(({y:s,x:t})=>i.add(`${s},${t}`)),this.positions.forEach(({y:s,x:t})=>{const n=`${s-1},${t}`;i.has(n)||(this.edges+=1);const I=`${s},${t+1}`;i.has(I)||(this.edges+=1);const o=`${s+1},${t}`;i.has(o)||(this.edges+=1);const r=`${s},${t-1}`;i.has(r)||(this.edges+=1)})}get price(){return this.positions.length*this.edges}},L=class{constructor(i){E(this,"matrix");E(this,"seenPositions");E(this,"regions");this.matrix=JSON.parse(JSON.stringify(i)),this.seenPositions=new Set,this.regions=[]}addRegion(i,s){const t=new z(this,i,this.at(s),s);return this.regions.push(t),t}inRegion(i){const s=`${i.y},${i.x}`;return this.seenPositions.has(s)}at(i){var s;return(s=this.matrix[i.y])==null?void 0:s[i.x]}*regionlessPositions(){for(let i=0;i<this.matrix.length;i++)for(let s=0;s<this.matrix[i].length;s++)this.inRegion({y:i,x:s})||(yield{y:i,x:s})}};function _(){const Q=B.useRef(null),[i,s]=B.useState("unstarted"),[t,n]=B.useState(0),I=B.useRef();I.current||(I.current=new L(F));const o=B.useCallback(async()=>{s("in-progress"),n(0);const S=Q.current.getContext("2d");S.clearRect(0,0,l,Y);const N=new L(F);I.current=N;async function d(A,{y:c,x:h}){n(j=>j+1);const W={y:c-1,x:h};!A.has(W)&&N.at(W)===A.value&&(A.add(W),await C(1),await d(A,W));const M={y:c,x:h+1};!A.has(M)&&N.at(M)===A.value&&(A.add(M),await C(1),await d(A,M));const H={y:c+1,x:h};!A.has(H)&&N.at(H)===A.value&&(A.add(H),await C(1),await d(A,H));const U={y:c,x:h-1};!A.has(U)&&N.at(U)===A.value&&(A.add(U),await C(1),await d(A,U))}for await(const A of I.current.regionlessPositions()){n(h=>h+1);const c=N.addRegion(S,A);await d(c,A),c.findEdges(),await C(1)}s("complete")},[s,n]);return e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"mt-4 flex gap-x-4",children:[e.jsx("div",{children:e.jsx(x,{input:Z})}),e.jsx("div",{children:e.jsx(G,{size:"lg",onClick:o,disabled:i==="in-progress",children:"Process Input"})})]}),e.jsxs("div",{className:"mt-4 tabular-nums",children:[e.jsxs("div",{children:["Iterations: ",t]}),e.jsxs("div",{children:["Total Price: ",V(I.current.regions.map(r=>r.price))]}),e.jsx("div",{className:m("overflow-x-auto",I.current.regions.length===0?"hidden h-0":"block"),children:e.jsx("canvas",{ref:Q,width:l,height:Y,style:{imageRendering:"crisp-edges"}})}),e.jsx(p,{type:"single",collapsible:!0,children:e.jsxs(D,{value:"regions",children:[e.jsx(O,{children:"Regions"}),e.jsx(g,{children:e.jsxs(X,{children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Value"}),e.jsx("th",{children:"Area"}),e.jsx("th",{children:"Perimiter"}),e.jsx("th",{children:"Price"})]})}),e.jsx("tbody",{children:I.current.regions.map((r,S)=>e.jsxs("tr",{children:[e.jsx("td",{children:r.value}),e.jsx("td",{children:r.positions.length}),e.jsx("td",{children:r.edges}),e.jsx("td",{children:r.price})]},S))})]})})]})})]})]})}const q=K.array(K.string().transform(Q=>Q.split(""))),ee=q.parse(Z.split(`
`));function se(Q,i){return i.side!==Q.side?!1:i.y===Q.y-1&&i.x===Q.x||i.y===Q.y&&i.x===Q.x+1||i.y===Q.y+1&&i.x===Q.x||i.y===Q.y&&i.x===Q.x-1}class ie{constructor(i,s){E(this,"value");E(this,"positions");E(this,"edges");E(this,"sides");this.value=i;const t=new Set;s.forEach(({y:I,x:o})=>t.add(`${I},${o}`)),this.positions=[],this.edges=[],s.forEach(({y:I,x:o})=>{const r=`${I-1},${o}`;t.has(r)||this.edges.push({y:I,x:o,side:"above"});const S=`${I},${o+1}`;t.has(S)||this.edges.push({y:I,x:o,side:"right"});const N=`${I+1},${o}`;t.has(N)||this.edges.push({y:I,x:o,side:"below"});const d=`${I},${o-1}`;t.has(d)||this.edges.push({y:I,x:o,side:"left"}),this.positions.push({y:I,x:o})}),this.sides=0;const n=new Set;for(let I=0;I<this.edges.length;I++){const o=this.edges[I];if(n.has(`${o.y},${o.x},${o.side}`))continue;n.add(`${o.y},${o.x},${o.side}`);const r=[o];for(this.sides+=1;;){const S=r.length;this.edges.filter(A=>r.some(c=>se(c,A))).forEach(A=>{n.has(`${A.y},${A.x},${A.side}`)||(n.add(`${A.y},${A.x},${A.side}`),r.push(A))});const d=r.length;if(S===d)break}}}get price(){return this.positions.length*this.sides}}class Ie{constructor(i){E(this,"matrix");E(this,"regions");this.matrix=JSON.parse(JSON.stringify(i)),this.regions=[];const s=new Set,t=(n,I,o)=>{const r=[];return!s.has(`${n-1},${I}`)&&this.at(n-1,I)===o&&(s.add(`${n-1},${I}`),r.push({y:n-1,x:I}),r.push(...t(n-1,I,o))),!s.has(`${n},${I+1}`)&&this.at(n,I+1)===o&&(s.add(`${n},${I+1}`),r.push({y:n,x:I+1}),r.push(...t(n,I+1,o))),!s.has(`${n+1},${I}`)&&this.at(n+1,I)===o&&(s.add(`${n+1},${I}`),r.push({y:n+1,x:I}),r.push(...t(n+1,I,o))),!s.has(`${n},${I-1}`)&&this.at(n,I-1)===o&&(s.add(`${n},${I-1}`),r.push({y:n,x:I-1}),r.push(...t(n,I-1,o))),r};this.matrix.forEach((n,I)=>{n.forEach((o,r)=>{const S=`${I},${r}`;s.has(S)||(s.add(S),this.regions.push(new ie(o,[{y:I,x:r},...t(I,r,o)])))})})}at(i,s){var t;return(t=this.matrix[i])==null?void 0:t[s]}}function ne(){const[Q,i]=B.useState("unstarted"),s=B.useRef(),t=B.useCallback(async()=>{i("in-progress"),s.current=new Ie(ee),i("complete")},[i]);return e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"mt-4 flex gap-x-4",children:[e.jsx("div",{children:e.jsx(x,{input:Z})}),e.jsx("div",{children:e.jsx(G,{size:"lg",onClick:t,disabled:Q==="in-progress",children:"Process Input"})})]}),e.jsx("div",{className:"mt-4 tabular-nums",children:s.current&&e.jsxs(e.Fragment,{children:[e.jsx(p,{type:"single",collapsible:!0,children:e.jsxs(D,{value:"regions",children:[e.jsx(O,{children:"Regions"}),e.jsx(g,{children:e.jsxs(X,{children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Value"}),e.jsx("th",{children:"Area"}),e.jsx("th",{children:"Edges"}),e.jsx("th",{children:"Sides"}),e.jsx("th",{children:"Price"})]})}),e.jsx("tbody",{children:s.current.regions.map((n,I)=>e.jsxs("tr",{children:[e.jsx("td",{children:n.value}),e.jsx("td",{children:n.positions.length}),e.jsx("td",{children:n.edges.length}),e.jsx("td",{children:n.sides}),e.jsx("td",{children:n.price})]},I))})]})})]})}),e.jsxs("p",{className:"mt-4",children:["Total Price: ",V(s.current.regions.map(n=>n.price))]})]})})]})}const We=function(){return e.jsxs(e.Fragment,{children:[e.jsx(J,{}),e.jsx(P,{hash:"part-1-prompt",children:"Part 1 – Prompt"}),e.jsxs("p",{children:["Why not search for the Chief Historian near the"," ",e.jsx("a",{href:"https://adventofcode.com/2023/day/5",target:"_blank",children:"gardener"})," ","and his"," ",e.jsx("a",{href:"https://adventofcode.com/2023/day/21",target:"_blank",children:"massive farm"}),"? There's plenty of food, so The Historians grab something to eat while they search."]}),e.jsxs("p",{children:["You're about to settle near a complex arrangement of garden plots when some Elves ask if you can lend a hand. They'd like to set up"," ",e.jsx("span",{title:'I originally wanted to title this puzzle "Fencepost Problem", but I was afraid someone would then try to count fenceposts by mistake and experience a fencepost problem.',children:"fences"})," ","around each region of garden plots, but they can't figure out how much fence they need to order or how much it will cost. They hand you a map (your puzzle input) of the garden plots."]}),e.jsxs("p",{children:["Each garden plot grows only a single type of plant and is indicated by a single letter on your map. When multiple garden plots are growing the same type of plant and are touching (horizontally or vertically), they form a ",e.jsx("em",{children:"region"}),". For example:"]}),e.jsx(a,{content:`AAAA
BBCD
BBCC
EEEC`}),e.jsxs("p",{children:["This 4x4 arrangement includes garden plots growing five different types of plants (labeled ",e.jsx("code",{children:"A"}),", ",e.jsx("code",{children:"B"}),", ",e.jsx("code",{children:"C"}),", ",e.jsx("code",{children:"D"}),", and"," ",e.jsx("code",{children:"E"}),"), each grouped into their own region."]}),e.jsxs("p",{children:["In order to accurately calculate the cost of the fence around a single region, you need to know that region's ",e.jsx("em",{children:"area"})," and ",e.jsx("em",{children:"perimeter"}),"."]}),e.jsxs("p",{children:["The ",e.jsx("em",{children:"area"})," of a region is simply the number of garden plots the region contains. The above map's type ",e.jsx("code",{children:"A"}),", ",e.jsx("code",{children:"B"}),", and ",e.jsx("code",{children:"C"})," ","plants are each in a region of area ",e.jsx("code",{children:"4"}),". The type ",e.jsx("code",{children:"E"})," plants are in a region of area ",e.jsx("code",{children:"3"}),"; the type ",e.jsx("code",{children:"D"})," plants are in a region of area ",e.jsx("code",{children:"1"}),"."]}),e.jsxs("p",{children:["Each garden plot is a square and so has ",e.jsx("em",{children:"four sides"}),". The ",e.jsx("em",{children:"perimeter"})," ","of a region is the number of sides of garden plots in the region that do not touch another garden plot in the same region. The type ",e.jsx("code",{children:"A"})," and ",e.jsx("code",{children:"C"})," ","plants are each in a region with perimeter ",e.jsx("code",{children:"10"}),". The type ",e.jsx("code",{children:"B"})," ","and ",e.jsx("code",{children:"E"})," plants are each in a region with perimeter ",e.jsx("code",{children:"8"}),". The lone ",e.jsx("code",{children:"D"})," plot forms its own region with perimeter ",e.jsx("code",{children:"4"}),"."]}),e.jsxs("p",{children:["Visually indicating the sides of plots in each region that contribute to the perimeter using ",e.jsx("code",{children:"-"})," and ",e.jsx("code",{children:"|"}),", the above map's regions' perimeters are measured as follows:"]}),e.jsx(a,{content:`+-+-+-+-+
|A A A A|
+-+-+-+-+     +-+
              |D|
+-+-+   +-+   +-+
|B B|   |C|
+   +   + +-+
|B B|   |C C|
+-+-+   +-+ +
          |C|
+-+-+-+   +-+
|E E E|
+-+-+-+`}),e.jsx("p",{children:"Plants of the same type can appear in multiple separate regions, and regions can even appear within other regions. For example:"}),e.jsx(a,{content:`OOOOO
OXOXO
OOOOO
OXOXO
OOOOO`}),e.jsxs("p",{children:["The above map contains ",e.jsx("em",{children:"five"})," regions, one containing all of the"," ",e.jsx("code",{children:"O"})," garden plots, and the other four each containing a single"," ",e.jsx("code",{children:"X"})," plot."]}),e.jsxs("p",{children:["The four ",e.jsx("code",{children:"X"})," regions each have area ",e.jsx("code",{children:"1"})," and perimeter"," ",e.jsx("code",{children:"4"}),". The region containing ",e.jsx("code",{children:"21"})," type ",e.jsx("code",{children:"O"})," plants is more complicated; in addition to its outer edge contributing a perimeter of"," ",e.jsx("code",{children:"20"}),", its boundary with each ",e.jsx("code",{children:"X"})," region contributes an additional ",e.jsx("code",{children:"4"})," to its perimeter, for a total perimeter of ",e.jsx("code",{children:"36"}),"."]}),e.jsxs("p",{children:['Due to "modern" business practices, the ',e.jsx("em",{children:"price"})," of fence required for a region is found by ",e.jsx("em",{children:"multiplying"})," that region's area by its perimeter. The"," ",e.jsx("em",{children:"total price"})," of fencing all regions on a map is found by adding together the price of fence for every region on the map."]}),e.jsxs("p",{children:["In the first example, region ",e.jsx("code",{children:"A"})," has price ",e.jsx("code",{children:"4 * 10 = 40"}),", region ",e.jsx("code",{children:"B"})," has price ",e.jsx("code",{children:"4 * 8 = 32"}),", region ",e.jsx("code",{children:"C"})," has price ",e.jsx("code",{children:"4 * 10 = 40"}),", region ",e.jsx("code",{children:"D"})," has price"," ",e.jsx("code",{children:"1 * 4 = 4"}),", and region ",e.jsx("code",{children:"E"})," has price ",e.jsx("code",{children:"3 * 8 = 24"}),". So, the total price for the first example is"," ",e.jsx("code",{children:e.jsx("em",{children:"140"})}),"."]}),e.jsxs("p",{children:["In the second example, the region with all of the ",e.jsx("code",{children:"O"})," plants has price"," ",e.jsx("code",{children:"21 * 36 = 756"}),", and each of the four smaller ",e.jsx("code",{children:"X"})," regions has price ",e.jsx("code",{children:"1 * 4 = 4"}),", for a total price of"," ",e.jsx("code",{children:e.jsx("em",{children:"772"})})," ","(",e.jsx("code",{children:"756 + 4 + 4 + 4 + 4"}),")."]}),e.jsx("p",{children:"Here's a larger example:"}),e.jsx(a,{content:`RRRRIICCFF
RRRRIICCCF
VVRRRCCFFF
VVRCCCJFFF
VVVVCJJCFE
VVIVCCJJEE
VVIIICJJEE
MIIIIIJJEE
MIIISIJEEE
MMMISSJEEE`}),e.jsx("p",{children:"It contains:"}),e.jsxs("ul",{children:[e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"R"})," plants with price ",e.jsx("code",{children:"12 * 18 = 216"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"I"})," plants with price ",e.jsx("code",{children:"4 * 8 = 32"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"C"})," plants with price ",e.jsx("code",{children:"14 * 28 = 392"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"F"})," plants with price ",e.jsx("code",{children:"10 * 18 = 180"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"V"})," plants with price ",e.jsx("code",{children:"13 * 20 = 260"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"J"})," plants with price ",e.jsx("code",{children:"11 * 20 = 220"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"C"})," plants with price ",e.jsx("code",{children:"1 * 4 = 4"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"E"})," plants with price ",e.jsx("code",{children:"13 * 18 = 234"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"I"})," plants with price ",e.jsx("code",{children:"14 * 22 = 308"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"M"})," plants with price ",e.jsx("code",{children:"5 * 12 = 60"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"S"})," plants with price ",e.jsx("code",{children:"3 * 8 = 24"}),"."]})]}),e.jsxs("p",{children:["So, it has a total price of"," ",e.jsx("code",{children:e.jsx("em",{children:"1930"})}),"."]}),e.jsx("p",{children:e.jsx("em",{children:"What is the total price of fencing all regions on your map?"})}),e.jsx(P,{hash:"part-1-solution",children:"Part 1 – Solution"}),e.jsx(_,{}),e.jsx("p",{children:"The code is fairly complex. A quick overview:"}),e.jsx("ul",{children:e.jsxs("li",{children:["Iterate over each position in the map. At each position...",e.jsxs("ol",{children:[e.jsx("li",{children:"If we've seen this position before, skip it"}),e.jsx("li",{children:"Use a recursive flood-fill algorithm to get all adjacent positions that make up a region"})]})]})}),e.jsx("p",{children:"Once we have each region, we can calculate the number of edges (i.e. the perimiter) for that region. The code for this is very simple. Let's say we have a region that looks like this:"}),e.jsx(a,{content:`.....
..A..
.AAA.
..A..
.....`}),e.jsxs("p",{children:["Where the ",e.jsx("code",{children:"A"})," characters are the positions that make up the region."]}),e.jsx("p",{children:"To calculate perimiter, we simply:"}),e.jsx("ul",{children:e.jsxs("li",{children:["Iterate over each position. At each position...",e.jsxs("ol",{children:[e.jsxs("li",{children:["Start with ",e.jsx("code",{children:"0"})," edges for that position"]}),e.jsxs("li",{children:["Check one space ",e.jsx("em",{children:"above"})," our position. If it's ",e.jsx("em",{children:"NOT"})," part of the region, ",e.jsx("code",{children:"edges += 1"})]}),e.jsxs("li",{children:["Check one space ",e.jsx("em",{children:"right of"})," our position. If it's ",e.jsx("em",{children:"NOT"})," ","part of the region, ",e.jsx("code",{children:"edges += 1"})]}),e.jsxs("li",{children:["Check one space ",e.jsx("em",{children:"below"})," our position. If it's ",e.jsx("em",{children:"NOT"})," part of the region, ",e.jsx("code",{children:"edges += 1"})]}),e.jsxs("li",{children:["Check one space ",e.jsx("em",{children:"left of"})," our position. If it's ",e.jsx("em",{children:"NOT"})," part of the region, ",e.jsx("code",{children:"edges += 1"})]})]})]})}),e.jsx("p",{children:"This gets us the number of edges for a given position. To get the total perimiter for the region, we sum the number of edges for all positions in the region."}),e.jsx(R,{content:`type StrPosition = \`\${number},\${number}\`;

interface Position {
    x: number;
    y: number;
}

interface EdgedPosition extends Position {
    edges: number;
}

class Region {
    value: string;
    positions: Array<EdgedPosition>;
    edges: number;

    constructor(value: string, positions: Array<Position>) {
        this.value = value;

        // Populate str positions
        const strPositions = new Set();
        positions.forEach(({ y, x }) => strPositions.add(\`\${y},\${x}\`));

        // Calculate edges
        this.positions = [];

        positions.forEach(({ y, x }) => {
            let positionEdges = 0;

            // Above
            const above: StrPosition = \`\${y - 1},\${x}\`;
            if (!strPositions.has(above)) positionEdges += 1;

            const right: StrPosition = \`\${y},\${x + 1}\`;
            if (!strPositions.has(right)) positionEdges += 1;

            const below: StrPosition = \`\${y + 1},\${x}\`;
            if (!strPositions.has(below)) positionEdges += 1;

            const left: StrPosition = \`\${y},\${x - 1}\`;
            if (!strPositions.has(left)) positionEdges += 1;

            this.positions.push({ y, x, edges: positionEdges });
        });

        this.edges = sum(this.positions.map(({ edges }) => edges));
    }

    get price() {
        return this.positions.length * this.edges;
    }
}

class Map {
    matrix: Array<Array<string>>;
    regions: Array<Region>;

    constructor(matrix: Array<Array<string>>) {
        // Poor man's copy
        this.matrix = JSON.parse(JSON.stringify(matrix));

        this.regions = [];

        // Start figuring out regions
        const seenPositions = new Set<StrPosition>();

        // Recursive function to find regions
        const findConnectedPositions = (y: number, x: number, value: string) => {
            const positions: Array<Position> = [];

            // Above
            if (!seenPositions.has(\`\${y - 1},\${x}\`) && this.at(y - 1, x) === value) {
                seenPositions.add(\`\${y - 1},\${x}\`);
                positions.push({ y: y - 1, x });
                positions.push(...findConnectedPositions(y - 1, x, value));
            }

            // Right
            if (!seenPositions.has(\`\${y},\${x + 1}\`) && this.at(y, x + 1) === value) {
                seenPositions.add(\`\${y},\${x + 1}\`);
                positions.push({ y, x: x + 1 });
                positions.push(...findConnectedPositions(y, x + 1, value));
            }

            // Below
            if (!seenPositions.has(\`\${y + 1},\${x}\`) && this.at(y + 1, x) === value) {
                seenPositions.add(\`\${y + 1},\${x}\`);
                positions.push({ y: y + 1, x });
                positions.push(...findConnectedPositions(y + 1, x, value));
            }

            // Left
            if (!seenPositions.has(\`\${y},\${x - 1}\`) && this.at(y, x - 1) === value) {
                seenPositions.add(\`\${y},\${x - 1}\`);
                positions.push({ y, x: x - 1 });
                positions.push(...findConnectedPositions(y, x - 1, value));
            }

            return positions;
        };

        this.matrix.forEach((row, y) => {
            row.forEach((character, x) => {
                const strPosition: StrPosition = \`\${y},\${x}\`;

                if (seenPositions.has(strPosition)) {
                    // Seen this before, skip it
                    return;
                }

                seenPositions.add(strPosition);

                this.regions.push(
                    new Region(character, [{ y, x }, ...findConnectedPositions(y, x, character)])
                );
            });
        });
    }

    at(y: number, x: number) {
        return this.matrix[y]?.[x];
    }
}
`}),e.jsx(T,{}),e.jsx(P,{hash:"part-2-prompt",children:"Part 2 – Prompt"}),e.jsxs("p",{children:["Fortunately, the Elves are trying to order so much fence that they qualify for a"," ",e.jsx("em",{children:"bulk discount"}),"!"]}),e.jsxs("p",{children:["Under the bulk discount, instead of using the perimeter to calculate the price, you need to use the ",e.jsx("em",{children:"number of sides"})," each region has. Each straight section of fence counts as a side, regardless of how long it is."]}),e.jsx("p",{children:"Consider this example again:"}),e.jsx(a,{content:`AAAA
BBCD
BBCC
EEEC`}),e.jsxs("p",{children:["The region containing type ",e.jsx("code",{children:"A"})," plants has ",e.jsx("code",{children:"4"})," sides, as does each of the regions containing plants of type ",e.jsx("code",{children:"B"}),", ",e.jsx("code",{children:"D"}),", and"," ",e.jsx("code",{children:"E"}),". However, the more complex region containing the plants of type"," ",e.jsx("code",{children:"C"})," has ",e.jsx("code",{children:"8"})," sides!"]}),e.jsxs("p",{children:["Using the new method of calculating the per-region price by multiplying the region's area by its number of sides, regions ",e.jsx("code",{children:"A"})," through ",e.jsx("code",{children:"E"})," have prices ",e.jsx("code",{children:"16"}),", ",e.jsx("code",{children:"16"}),", ",e.jsx("code",{children:"32"}),", ",e.jsx("code",{children:"4"}),", and"," ",e.jsx("code",{children:"12"}),", respectively, for a total price of"," ",e.jsx("code",{children:e.jsx("em",{children:"80"})}),"."]}),e.jsxs("p",{children:["The second example above (full of type ",e.jsx("code",{children:"X"})," and ",e.jsx("code",{children:"O"})," plants) would have a total price of"," ",e.jsx("code",{children:e.jsx("em",{children:"436"})}),"."]}),e.jsxs("p",{children:["Here's a map that includes an E-shaped region full of type ",e.jsx("code",{children:"E"})," plants:"]}),e.jsx(a,{content:`EEEEE
EXXXX
EEEEE
EXXXX
EEEEE`}),e.jsxs("p",{children:["The E-shaped region has an area of ",e.jsx("code",{children:"17"})," and ",e.jsx("code",{children:"12"})," sides for a price of ",e.jsx("code",{children:"204"}),". Including the two regions full of type ",e.jsx("code",{children:"X"})," ","plants, this map has a total price of"," ",e.jsx("code",{children:e.jsx("em",{children:"236"})}),"."]}),e.jsxs("p",{children:["This map has a total price of"," ",e.jsx("code",{children:e.jsx("em",{children:"368"})}),":"]}),e.jsx(a,{content:`AAAAAA
AAABBA
AAABBA
ABBAAA
ABBAAA
AAAAAA`}),e.jsxs("p",{children:["It includes two regions full of type ",e.jsx("code",{children:"B"})," plants (each with ",e.jsx("code",{children:"4"})," ","sides) and a single region full of type ",e.jsx("code",{children:"A"})," plants (with ",e.jsx("code",{children:"4"})," ","sides on the outside and ",e.jsx("code",{children:"8"})," more sides on the inside, a total of"," ",e.jsx("code",{children:"12"})," sides). Be especially careful when counting the fence around regions like the one full of type ",e.jsx("code",{children:"A"})," plants; in particular, each section of fence has an in-side and an out-side, so the fence does not connect across the middle of the region (where the two ",e.jsx("code",{children:"B"})," regions touch diagonally). (The Elves would have used the Möbius Fencing Company instead, but their contract terms were too one-sided.)"]}),e.jsx("p",{children:"The larger example from before now has the following updated prices:"}),e.jsxs("ul",{children:[e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"R"})," plants with price ",e.jsx("code",{children:"12 * 10 = 120"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"I"})," plants with price ",e.jsx("code",{children:"4 * 4 = 16"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"C"})," plants with price ",e.jsx("code",{children:"14 * 22 = 308"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"F"})," plants with price ",e.jsx("code",{children:"10 * 12 = 120"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"V"})," plants with price ",e.jsx("code",{children:"13 * 10 = 130"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"J"})," plants with price ",e.jsx("code",{children:"11 * 12 = 132"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"C"})," plants with price ",e.jsx("code",{children:"1 * 4 = 4"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"E"})," plants with price ",e.jsx("code",{children:"13 * 8 = 104"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"I"})," plants with price ",e.jsx("code",{children:"14 * 16 = 224"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"M"})," plants with price ",e.jsx("code",{children:"5 * 6 = 30"}),"."]}),e.jsxs("li",{children:["A region of ",e.jsx("code",{children:"S"})," plants with price ",e.jsx("code",{children:"3 * 6 = 18"}),"."]})]}),e.jsxs("p",{children:["Adding these together produces its new total price of"," ",e.jsx("code",{children:e.jsx("em",{children:"1206"})}),"."]}),e.jsx("p",{children:e.jsx("em",{children:"What is the new total price of fencing all regions on your map?"})}),e.jsx(P,{hash:"part-2-solution",children:"Part 2 – Solution"}),e.jsx(ne,{}),e.jsx("p",{children:"The first part of this solution (i.e. finding regions) is identical to Part 1."}),e.jsxs("p",{children:["The second part (i.e. calculating sides) is a bit more complex. We'll first calculate all edges in the region and include information on"," ",e.jsx("em",{children:"what side of the node that edge is on"}),"."]}),e.jsxs("ul",{children:[e.jsxs("li",{children:["Iterate over all edges in the region. For each edge...",e.jsxs("ol",{children:[e.jsx("li",{children:"If we've seen this edge before, skip it"}),e.jsx("li",{children:"Increment the number of sides we've seen so far (seeing a new edge here always counts as a new side)"}),e.jsxs("li",{children:["Iterate over all edges in the region, accumulating adjacent edges (i.e. edges that have the same ",e.jsx("code",{children:"side"})," and are one-hop away (either x ± 1 or y ± 1)"]})]})]}),e.jsx("li",{children:"Once we stop accumulating adjacent edges (we've found all adjacent edges for a side), mark those edges as seen"})]}),e.jsx("p",{children:"In this way, we accumulate edges into sides such that every edge is checked against every side for a possible match."}),e.jsx(R,{content:`type StrPosition = \`\${number},\${number}\`;

interface Position {
    x: number;
    y: number;
}

type Side = "above" | "right" | "below" | "left";

type StrEdge = \`\${number},\${number},\${Side}\`;

interface Edge extends Position {
    side: Side;
}

function adjacent(edge1: Edge, edge2: Edge) {
    if (edge2.side !== edge1.side) return false;

    // Above
    if (edge2.y === edge1.y - 1 && edge2.x === edge1.x) return true;

    // Right
    if (edge2.y === edge1.y && edge2.x === edge1.x + 1) return true;

    // Below
    if (edge2.y === edge1.y + 1 && edge2.x === edge1.x) return true;

    // Left
    if (edge2.y === edge1.y && edge2.x === edge1.x - 1) return true;

    return false;
}

class Region {
    value: string;
    positions: Array<Position>;
    edges: Array<Edge>;
    sides: number;

    constructor(value: string, positions: Array<Position>) {
        this.value = value;

        // Populate str positions
        const strPositions = new Set();
        positions.forEach(({ y, x }) => strPositions.add(\`\${y},\${x}\`));

        // Calculate edges
        this.positions = [];
        this.edges = [];

        positions.forEach(({ y, x }) => {
            let positionEdges = 0;

            // Above
            const above: StrPosition = \`\${y - 1},\${x}\`;
            if (!strPositions.has(above)) {
                positionEdges += 1;
                this.edges.push({ y, x, side: "above" });
            }

            const right: StrPosition = \`\${y},\${x + 1}\`;
            if (!strPositions.has(right)) {
                positionEdges += 1;
                this.edges.push({ y, x, side: "right" });
            }

            const below: StrPosition = \`\${y + 1},\${x}\`;
            if (!strPositions.has(below)) {
                positionEdges += 1;
                this.edges.push({ y, x, side: "below" });
            }

            const left: StrPosition = \`\${y},\${x - 1}\`;
            if (!strPositions.has(left)) {
                positionEdges += 1;
                this.edges.push({ y, x, side: "left" });
            }

            this.positions.push({ y, x });
        });

        // Calculate sides
        this.sides = 0;
        const seenEdges = new Set<StrEdge>();

        for (let i = 0; i < this.edges.length; i++) {
            const edge = this.edges[i]!;

            // Skip edges we've already seen
            if (seenEdges.has(\`\${edge.y},\${edge.x},\${edge.side}\`)) continue;

            seenEdges.add(\`\${edge.y},\${edge.x},\${edge.side}\`);
            const side: Array<Edge> = [edge];
            this.sides += 1;

            while (true) {
                // Save number of edges on this side for this loop
                const start = side.length;

                // Get all adjacent edges
                const adjacentEdges = this.edges.filter((adjacentEdge) => {
                    return side.some((sideEdge) => adjacent(sideEdge, adjacentEdge));
                });

                // Combine with seen edges and side
                adjacentEdges.forEach((adjacentEdge) => {
                    if (seenEdges.has(\`\${adjacentEdge.y},\${adjacentEdge.x},\${adjacentEdge.side}\`))
                        return;

                    seenEdges.add(\`\${adjacentEdge.y},\${adjacentEdge.x},\${adjacentEdge.side}\`);
                    side.push(adjacentEdge);
                });

                const end = side.length;

                if (start === end) break;
            }
        }
    }

    get price() {
        return this.positions.length * this.sides;
    }
}

class Map {
    matrix: Array<Array<string>>;
    regions: Array<Region>;

    constructor(matrix: Array<Array<string>>) {
        // Poor man's copy
        this.matrix = JSON.parse(JSON.stringify(matrix));

        this.regions = [];

        // Start figuring out regions
        const seenPositions = new Set<StrPosition>();

        // Recursive function to find regions
        const findConnectedPositions = (y: number, x: number, value: string) => {
            const positions: Array<Position> = [];

            // Above
            if (!seenPositions.has(\`\${y - 1},\${x}\`) && this.at(y - 1, x) === value) {
                seenPositions.add(\`\${y - 1},\${x}\`);
                positions.push({ y: y - 1, x });
                positions.push(...findConnectedPositions(y - 1, x, value));
            }

            // Right
            if (!seenPositions.has(\`\${y},\${x + 1}\`) && this.at(y, x + 1) === value) {
                seenPositions.add(\`\${y},\${x + 1}\`);
                positions.push({ y, x: x + 1 });
                positions.push(...findConnectedPositions(y, x + 1, value));
            }

            // Below
            if (!seenPositions.has(\`\${y + 1},\${x}\`) && this.at(y + 1, x) === value) {
                seenPositions.add(\`\${y + 1},\${x}\`);
                positions.push({ y: y + 1, x });
                positions.push(...findConnectedPositions(y + 1, x, value));
            }

            // Left
            if (!seenPositions.has(\`\${y},\${x - 1}\`) && this.at(y, x - 1) === value) {
                seenPositions.add(\`\${y},\${x - 1}\`);
                positions.push({ y, x: x - 1 });
                positions.push(...findConnectedPositions(y, x - 1, value));
            }

            return positions;
        };

        this.matrix.forEach((row, y) => {
            row.forEach((character, x) => {
                const strPosition: StrPosition = \`\${y},\${x}\`;

                if (seenPositions.has(strPosition)) {
                    // Seen this before, skip it
                    return;
                }

                seenPositions.add(strPosition);

                this.regions.push(
                    new Region(character, [{ y, x }, ...findConnectedPositions(y, x, character)])
                );
            });
        });
    }

    at(y: number, x: number) {
        return this.matrix[y]?.[x];
    }
}
`}),e.jsx(T,{}),e.jsx(P,{hash:"recap",children:"Recap"}),e.jsxs(X,{children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Part 1 Time"}),e.jsx("th",{children:"Part 1 Rank"}),e.jsx("th",{children:"Part 2 Time"}),e.jsx("th",{children:"Part 2 Rank"})]})}),e.jsx("tbody",{children:e.jsxs("tr",{children:[e.jsx("td",{children:"01:03:16"}),e.jsx("td",{children:"6,627"}),e.jsx("td",{children:"01:44:10"}),e.jsx("td",{children:"3,769"})]})})]}),e.jsxs("p",{children:["I was ",e.jsx("i",{children:"really"})," hoping I could get away without doing a flood-fill algorithm, but I gave in after ~30 minutes or so. This was a pretty satisfying one to solve, but I can tell the challenges are starting to get much harder."]})]})};export{We as component};
